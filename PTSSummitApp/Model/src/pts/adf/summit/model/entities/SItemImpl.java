package pts.adf.summit.model.entities;

import java.math.BigDecimal;

import oracle.jbo.Key;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 14 14:13:06 EEST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SItemImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        OrdId,
        ItemId,
        ProductId,
        Price,
        Quantity,
        QuantityShipped,
        SOrd,
        SProduct;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ORDID = AttributesEnum.OrdId.index();
    public static final int ITEMID = AttributesEnum.ItemId.index();
    public static final int PRODUCTID = AttributesEnum.ProductId.index();
    public static final int PRICE = AttributesEnum.Price.index();
    public static final int QUANTITY = AttributesEnum.Quantity.index();
    public static final int QUANTITYSHIPPED = AttributesEnum.QuantityShipped.index();
    public static final int SORD = AttributesEnum.SOrd.index();
    public static final int SPRODUCT = AttributesEnum.SProduct.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SItemImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("pts.adf.summit.model.entities.SItem");
    }


    /**
     * Gets the attribute value for OrdId, using the alias name OrdId.
     * @return the value of OrdId
     */
    public Integer getOrdId() {
        return (Integer) getAttributeInternal(ORDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdId.
     * @param value value to set the OrdId
     */
    public void setOrdId(Integer value) {
        setAttributeInternal(ORDID, value);
    }

    /**
     * Gets the attribute value for ItemId, using the alias name ItemId.
     * @return the value of ItemId
     */
    public DBSequence getItemId() {
        return (DBSequence) getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemId.
     * @param value value to set the ItemId
     */
    public void setItemId(DBSequence value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for ProductId, using the alias name ProductId.
     * @return the value of ProductId
     */
    public Integer getProductId() {
        return (Integer) getAttributeInternal(PRODUCTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductId.
     * @param value value to set the ProductId
     */
    public void setProductId(Integer value) {
        setAttributeInternal(PRODUCTID, value);
        //Code added to set the item price to be the wholesale price of the new product..
        SProductImpl prodInfo = (SProductImpl) getSProduct();
        setPrice(prodInfo.getSuggestedWhlslPrice());
    }

    /**
     * Gets the attribute value for Price, using the alias name Price.
     * @return the value of Price
     */
    public BigDecimal getPrice() {
        return (BigDecimal) getAttributeInternal(PRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Price.
     * @param value value to set the Price
     */
    public void setPrice(BigDecimal value) {
        //    When ever this attribute is changed, the order total has to be updated as this is based
        //    on the line item, which is the price * quantity.

        //Get the price before you change it
        BigDecimal oldPrice = getPrice();

        //When adding a new line you won't have an oldPrice
        if (oldPrice == null) {
            oldPrice = new BigDecimal(0);
        }

        setAttributeInternal(PRICE, value);

        //Recalculate the order total if the price changes.
        SOrdImpl order = getSOrd();
        //First of all remove the the old line item total from the order total
        BigDecimal orderTotal = order.getTotal().subtract(new BigDecimal(getQuantity()).multiply(oldPrice));


        //Now add the new line item total
        order.setTotal(orderTotal.add(new BigDecimal(getQuantity()).multiply(value)));
    }

    /**
     * Gets the attribute value for Quantity, using the alias name Quantity.
     * @return the value of Quantity
     */
    public Integer getQuantity() {
        return (Integer) getAttributeInternal(QUANTITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for Quantity.
     * @param value value to set the Quantity
     */
    public void setQuantity(Integer value) {
        Integer oldQuantity = getQuantity();
        setAttributeInternal(QUANTITY, value);

        //Recalculate the order total if the quantity changes.
        SOrdImpl order = getSOrd();
        //First of all remove the the old line item total from the order total
        BigDecimal orderTotal = order.getTotal().subtract(getPrice().multiply(new BigDecimal(oldQuantity)));

        //Now add the new line item total
        order.setTotal(orderTotal.add(getPrice().multiply(new BigDecimal(value))));
    }

    /**
     * Gets the attribute value for QuantityShipped, using the alias name QuantityShipped.
     * @return the value of QuantityShipped
     */
    public Integer getQuantityShipped() {
        return (Integer) getAttributeInternal(QUANTITYSHIPPED);
    }

    /**
     * Sets <code>value</code> as the attribute value for QuantityShipped.
     * @param value value to set the QuantityShipped
     */
    public void setQuantityShipped(Integer value) {
        //    When ever this attribute is changed, the order total has to be updated as this is based
        //    on the line item, which is the price * quantityShipped.

        //Get the quantityShipped before you change it
        Integer oldQuantity = getQuantityShipped();
        setAttributeInternal(QUANTITYSHIPPED, value);

        //Recalculate the order total if the price changes.
        SOrdImpl order = (SOrdImpl) getSOrd();
        //First of all remove the the old line item total from the order total
        BigDecimal orderTotal = order.getTotal().subtract(getPrice().multiply(new BigDecimal(oldQuantity)));

        //Now add the new line item total
        order.setTotal(orderTotal.add(getPrice().multiply(new BigDecimal(value))));
    }

    /**
     * @return the associated entity SOrdImpl.
     */
    public SOrdImpl getSOrd() {
        return (SOrdImpl) getAttributeInternal(SORD);
    }

    /**
     * Sets <code>value</code> as the associated entity SOrdImpl.
     */
    public void setSOrd(SOrdImpl value) {
        setAttributeInternal(SORD, value);
    }

    /**
     * @return the associated entity SProductImpl.
     */
    public SProductImpl getSProduct() {
        return (SProductImpl) getAttributeInternal(SPRODUCT);
    }

    /**
     * Sets <code>value</code> as the associated entity SProductImpl.
     */
    public void setSProduct(SProductImpl value) {
        setAttributeInternal(SPRODUCT, value);
    }

    /**
     * @param ordId key constituent
     * @param itemId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer ordId, DBSequence itemId) {
        return new Key(new Object[] { ordId, itemId });
    }


}

